library(here)
library(ggplot2)
library(rlang)
library(rstatix)
library(nlme)
library(cowplot)
library(ggbeeswarm)
library(ggpubr)
library(ggsignif)
setwd("/home/julianne/Documents/slc_si_paper/")
data<-read.csv("FITC_data/Spontaneous_FITC_Analysis - Sheet1.csv", header=TRUE)
generate_boxplots <- function(input_data, X, Y, min,max){
data<-as.data.frame(input_data)
#Ensure correct ordering of levels
data$Genotype <- factor(data$Genotype, levels = c("WT", "HET", "MUT"))
data$Sex <- factor(data$Sex, levels = c("Female","Male"))
ggplot(data=data,aes(x={{X}},y={{Y}}, fill={{X}})) +
#geom_violin(alpha=0.25,position=position_dodge(width=.75),size=1,color="black",draw_quantiles=c(0.5))+
geom_boxplot(alpha=0.25)+
#geom_quasirandom(alpha=0.1)+
scale_fill_viridis_d()+
geom_point(size=1,position=position_jitter(width=0.25),alpha=0.8)+
theme_cowplot(16) +
#ylim(min,max)+
theme(legend.position = "none")
}
## lines that you need to modify ---
generate_boxplots(data, Genotype, Mean, 0,40 ) +
stat_compare_means(comparisons = list(c("WT", "MUT")),method="wilcox", vjust=0.5,label="p.signif",step.increase=0.08, hide.ns = TRUE)
## lines that you need to modify ---
generate_boxplots(data, Genotype, Mean, 0,40 ) +
stat_compare_means(comparisons = list(c("WT", "MUT")),method="wilcox", vjust=0.5,label="p.signif",step.increase=0.08, hide.ns = TRUE)
generate_boxplots(data, Genotype, Mean, 0,40 ) +
stat_compare_means(comparisons = list(c("WT", "MUT")),method="wilcox", vjust=0.5,label="p.signif",step.increase=0.08, hide.ns = TRUE)+
facet_wrap(~FITC)
## lines that you need to modify ---
generate_boxplots(data, Genotype, Mean, 0,40 ) +
stat_compare_means(comparisons = list(c("WT", "MUT")),method="wilcox", vjust=0.5,label="p.signif",step.increase=0.08, hide.ns = TRUE)
setwd("/home/julianne/Documents/slc_si_paper/")
data<-read.csv("FITC_data/Spontaneous_FITC_Analysis - Sheet1.csv", header=TRUE)
names(data)
generate_boxplots <- function(input_data, X, Y, min,max){
data<-as.data.frame(input_data)
#Ensure correct ordering of levels
data$Genotype <- factor(data$Genotype, levels = c("WT", "HET", "MUT"))
data$Sex <- factor(data$Sex, levels = c("Female","Male"))
ggplot(data=data,aes(x={{X}},y={{Y}}, fill={{X}})) +
#geom_violin(alpha=0.25,position=position_dodge(width=.75),size=1,color="black",draw_quantiles=c(0.5))+
geom_boxplot(alpha=0.25)+
#geom_quasirandom(alpha=0.1)+
scale_fill_viridis_d()+
geom_point(size=1,position=position_jitter(width=0.25),alpha=0.8)+
theme_cowplot(16) +
#ylim(min,max)+
theme(legend.position = "none")
}
## lines that you need to modify ---
generate_boxplots(data, Genotype, Mean, 0,40 ) +
stat_compare_means(comparisons = list(c("WT", "MUT")),method="wilcox", vjust=0.5,label="p.signif",step.increase=0.08, hide.ns = TRUE)
## lines that you need to modify ---
generate_boxplots(data, Genotype, Mean, 0,40 ) +
stat_compare_means(comparisons = list(c("WT", "MUT")),
method="wilcox", vjust=0.5,label="p.signif",step.increase=0.08, hide.ns = TRUE)
## lines that you need to modify ---
generate_boxplots(data, Genotype, Mean, 0,40 ) +
stat_compare_means(comparisons = list(c("WT", "MUT")),
method="wilcox", vjust=0.5,label="",step.increase=0.08, hide.ns = TRUE)
t.test(Mean~Genotype)
t.test(Mean~Genotype,data=data)
subset <- data %>% filter(Genotype!="HET")
t.test(Mean~Genotype,data=data)
t.test(Mean~Genotype,data=subset)
wilcox.test(Mean~Genotype, data=subset)
subset <- data %>% filter(Genotype!="MUT")
t.test(Mean~Genotype,data=subset)
wilcox.test(Mean~Genotype, data=subset)
## lines that you need to modify ---
generate_boxplots(data, Genotype, Mean, 0,40 ) +
stat_compare_means(comparisons = list(c("WT", "MUT")),
method="wilcox", vjust=0.5,label="",step.increase=0.08, hide.ns = TRUE)
## lines that you need to modify ---
generate_boxplots(data, Genotype, Mean, 0,40 ) +
stat_compare_means(comparisons = list(c("WT", "MUT")),
method="wilcox", vjust=0.5,label="",step.increase=0.08, hide.ns = TRUE)+
ggtitle("SLC Spontaneous FITC")
library(ggplot2)
library(vegan)
library(dplyr)
library(rlang)
library(cowplot)
library(viridis)
library(Microbiome.Biogeography)
## Store taxonomy in an annotation file --
annotation <- tibble::rownames_to_column(counts, "feature") %>% select(c("feature", "taxonomy"))
counts <- counts %>% select(-c("taxonomy"))
