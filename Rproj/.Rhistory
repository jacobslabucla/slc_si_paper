library(ggplot2)
library(dplyr)
library(cowplot)
library(here)
library(tidyr)
library(ggbeeswarm)
## Histo Scores --
histo<- read.csv("/home/julianne/Documents/slcsipaper/Ileum Spontaneous ICP-MS.csv")
library(ggplot2)
library(dplyr)
library(cowplot)
library(here)
library(tidyr)
library(ggbeeswarm)
wilcox.test(Grade~Genotype,data=histo)
library(ggplot2)
library(dplyr)
library(cowplot)
library(here)
library(tidyr)
library(ggbeeswarm)
## Histo Scores --
histo<- read.csv("/home/julianne/Documents/slcsipaper/Ileum Spontaneous ICP-MS.csv")
histo$Genotype <- factor(histo$Genotype, levels=c("WT", "HET", "MUT"))
ggplot(data=histo,aes(x=Genotype,y=Grade, color=Genotype)) +
stat_summary(aes(x=Genotype, y=Grade), fun=median, geom="crossbar", colour="black")+
geom_beeswarm(cex = 3,priority = "density",size=3)+
scale_color_viridis_d(option = "D")+
theme_cowplot(16) +
theme(legend.position = "none")+
ggtitle("Histology")+
ylab("Score")+
xlab("")+
ylim(0,2.5)+
theme(plot.title = element_text(hjust = 0.5))
wilcox.test(Grade~Genotype,data=histo)
## Histo Scores --
histo<- read.csv("/home/julianne/Documents/slcsipaper/Ileum Spontaneous ICP-MS.csv")
library(here)
library(tidyr)
library(ggbeeswarm)
## Histo Scores --
histo<- read.csv("/home/julianne/Documents/slcsipaper/Ileum Spontaneous ICP-MS.csv")
here::i_am(path = "ICP-MS_Histology.R")
## Histo Scores --
histo<- read.csv(here)
## Histo Scores --
histo<- readr::read_csv(here)
histo$Genotype <- factor(histo$Genotype, levels=c("WT", "HET", "MUT"))
## Histo Scores --
histo <- readr::read_csv(here)
here::i_am(path = "ICP-MS_Histology.R")
here::i_am(path = "Rproj/ICP-MS_Histology.R")
here::i_am(path = "Rproj/ICP-MS_Histology.R")
## Histo Scores --
histo <- readr::read_csv(here("../SLC ICP-MS/Ileum Spontaneous ICP-MS.csv"))
## Histo Scores --
histo <- readr::read_csv(here("/SLC ICP-MS/Ileum Spontaneous ICP-MS.csv"))
## Histo Scores --
histo <- readr::read_csv(here("SLC ICP-MS/Ileum Spontaneous ICP-MS.csv"))
histo$Genotype <- factor(histo$Genotype, levels=c("WT", "HET", "MUT"))
ggplot(data=histo,aes(x=Genotype,y=Grade, color=Genotype)) +
stat_summary(aes(x=Genotype, y=Grade), fun=median, geom="crossbar", colour="black")+
geom_beeswarm(cex = 3,priority = "density",size=3)+
scale_color_viridis_d(option = "D")+
theme_cowplot(16) +
theme(legend.position = "none")+
ggtitle("Histology")+
ylab("Score")+
xlab("")+
ylim(0,2.5)+
theme(plot.title = element_text(hjust = 0.5))
wilcox.test(Grade~Genotype,data=histo)
View(histo)
## Histo Scores --
histo <- readr::read_csv(here("SLC ICP-MS/Ileum Spontaneous ICP-MS.csv"))
ggplot(data=histo,aes(x=Genotype,y=Grade, color=Genotype)) +
stat_summary(aes(x=Genotype, y=Grade), fun=median, geom="crossbar", colour="black")+
geom_beeswarm(cex = 3,priority = "density",size=3)+
scale_color_viridis_d(option = "D")+
theme_cowplot(16) +
theme(legend.position = "none")+
ggtitle("Histology")+
ylab("Score")+
xlab("")+
ylim(0,2.5)+
theme(plot.title = element_text(hjust = 0.5))
View(histo)
here::i_am("ICP_MS_Analysis.R")
### Data Preprocessing ---
# replace all n/a and declare all element columns as numerical
df[df=="n/a"]<-0
vector <- names(df)
elements <- vector[1:7]
df <- df %>% mutate_at(c(elements), as.numeric)
str(df)
df$Genotype_Batch <- paste0(df$Genotype, "_",df$Batch)
df$Genotype_Sex <- paste0(df$Genotype,"_",df$Sex)
# Subset by SampleType - with outliers
df_fp_col <- df %>% filter(SampleType=="FP-COL")
df_fp_si <- df %>% filter(SampleType=="FP-SI")
df_muc_col <- df %>% filter(SampleType=="MUC-COL")
library(here)
library(ggplot2)
library(rlang)
library(cowplot)
library(ggpubr)
library(dplyr)
here::i_am("ICP_MS_Analysis.R")
### Data Preprocessing ---
# replace all n/a and declare all element columns as numerical
df[df=="n/a"]<-0
vector <- names(df)
elements <- vector[1:7]
df <- df %>% mutate_at(c(elements), as.numeric)
str(df)
df$Genotype_Batch <- paste0(df$Genotype, "_",df$Batch)
df$Genotype_Sex <- paste0(df$Genotype,"_",df$Sex)
# Subset by SampleType - with outliers
df_fp_si <- df %>% filter(SampleType=="FP-SI")
df_muc_si <- df %>% filter(SampleType=="MUC-SI")
df_ts_si <- df %>% filter(SampleType=="TS-SI")
### Figures ---
generate_violin_plots <- function (input_data, column_index, X) {
# read in file
data<-as.data.frame(input_data)
#Ensure correct ordering of levels
data$Genotype <- factor(data$Genotype, levels = c("WT","MUT"))
data$Genotype_Batch <- factor(data$Genotype_Batch, levels=c("WT_One","WT_Two", "WT_Three", "MUT_One", "MUT_Two", "MUT_Three"))
data$Genotype_Sex <- factor(data$Genotype_Sex, levels=c("WT_Male","WT_Female", "MUT_Male", "MUT_Female"))
#Get correct y-axis label
ylabel <- c(elements[column_index])
ggplot(data=data,aes(x={{X}},y=data[, column_index], fill=Genotype)) +
geom_violin(alpha=0.25,position=position_dodge(width=.75),size=1,color="black",draw_quantiles=c(0.5))+
#scale_shape_manual(values=c(16,10))+
scale_fill_viridis_d()+
geom_point(size=1,position=position_jitter(width=0.25),alpha=0.8)+
theme_cowplot(16) +
theme(legend.position = "none") +
labs(x="",y=ylabel)
#ylim(min,max) +
}
element_plots <- list()
fp_si_plots <- list()
muc_si_plots <- list()
ts_si_plots <- list()
compare_vector<- c("WT","MUT")
# Loop through all elements - Genotype as X variable
for (int in 1:7){
print(int)
fp_si <- generate_violin_plots(df_fp_si, int, Genotype)+
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("FP SI")+
stat_compare_means(comparisons = compare_vector,
method="wilcox", vjust=0.5,label="p.signif",step.increase=0.08, hide.ns = TRUE)
muc_si <- generate_violin_plots(df_muc_si, int, Genotype) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("MUC SI")+
stat_compare_means(comparisons = compare_vector,
method="wilcox", vjust=0.5,label="p.signif",step.increase=0.08, hide.ns = TRUE)
m
ts_si <- generate_violin_plots(df_ts_si, int, Genotype)+
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("TS SI")+
stat_compare_means(comparisons = compare_vector,
method="wilcox", vjust=0.5,label="p.signif",step.increase=0.08, hide.ns = TRUE)
t
element_plots[[int]] <- cowplot::plot_grid(fp_col, fp_si,muc_col,muc_si, ts_col,ts_si,
rows = 3,cols=2)
fp_si_plots[[int]] <- fp_si
muc_si_plots[[int]] <- muc_si
ts_si_plots[[int]] <- ts_si
}
# Loop through all elements - Genotype_Batch as X variable
element_plots <- list()
fp_si_plots <- list()
muc_si_plots <- list()
ts_si_plots <- list()
compare_vector<- c("WT","MUT")
for (int in 1:7){
print(int)
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
fp_si <- generate_violin_plots(df_fp_si, int, Genotype_Batch)+
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("FP SI")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
muc_si <- generate_violin_plots(df_muc_si, int, Genotype_Batch) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("MUC SI")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ts_si <- generate_violin_plots(df_ts_si, int, Genotype_Batch)+
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("TS SI")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
element_plots[[int]] <- cowplot::plot_grid(fp_col, fp_si,muc_col,muc_si, ts_col,ts_si,
rows = 3,cols=2)
fp_si_plots[[int]] <- fp_si
muc_si_plots[[int]] <- muc_si
ts_si_plots[[int]] <- ts_si
}
# Loop through all elements - Genotype_Sex as X variable
element_plots <- list()
fp_si_plots <- list()
muc_si_plots <- list()
ts_si_plots <- list()
for (int in 1:7){
print(int)
fp_si <- generate_violin_plots(df_fp_si, int, Genotype_Sex)+
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("FP SI")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
muc_si <- generate_violin_plots(df_muc_si, int, Genotype_Sex) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("MUC SI")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ts_si <- generate_violin_plots(df_ts_si, int, Genotype_Sex)+
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("TS SI")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
element_plots[[int]] <- cowplot::plot_grid(fp_col, fp_si,muc_col,muc_si, ts_col,ts_si,
rows = 3,cols=2)
fp_si_plots[[int]] <- fp_si
muc_si_plots[[int]] <- muc_si
ts_si_plots[[int]] <- ts_si
}
#FP SI
dev.new(width=15, height=10)
plot_grid(fp_si_plots[[1]],fp_si_plots[[2]],
fp_si_plots[[3]],fp_si_plots[[4]],
fp_si_plots[[5]],fp_si_plots[[6]],
fp_si_plots[[7]],nrow = 2, ncol=4)
#MUC SI
dev.new(width=15, height=10)
plot_grid(muc_si_plots[[1]],muc_si_plots[[2]],
muc_si_plots[[3]],muc_si_plots[[4]],
muc_si_plots[[5]],muc_si_plots[[6]],
muc_si_plots[[7]],nrow = 2, ncol=4)
#TS SI
dev.new(width=15, height=10)
plot_grid(ts_si_plots[[1]],ts_si_plots[[2]],
ts_si_plots[[3]],ts_si_plots[[4]],
ts_si_plots[[5]],ts_si_plots[[6]],
ts_si_plots[[7]],nrow = 2, ncol=4)
### Statistics ---
element_stats_para <- list()
element_stats_nonpara <-list()
for (int in 1:7){
print(int)
ts_si_para <- t.test(df_ts_si[,int]~Genotype,df_ts_si)
ts_si_nonpara <- wilcox.test(df_ts_si[,int]~Genotype,df_ts_si)
muc_si_para <- t.test(df_muc_si[,int]~Genotype,df_muc_si)
muc_si_nonpara <- wilcox.test(df_muc_si[,int]~Genotype,df_muc_si)
fp_si_para <- t.test(df_fp_si[,int]~Genotype,df_fp_si)
fp_si_nonpara <- wilcox.test(df_fp_si[,int]~Genotype,df_fp_si)
element_stats_para[[int]] <-list(print(fp_col_para), print(fp_si_para),print(muc_col_para),print(muc_si_para), print(ts_col_para),print(ts_si_para))
element_stats_nonpara[[int]] <-list(print(fp_col_nonpara), print(fp_si_nonpara),print(muc_col_nonpara),print(muc_si_nonpara), print(ts_col_nonpara),print(ts_si_nonpara))
}
names(df_ts_col)
# Iron
element_stats_para[[1]]
element_stats_nonpara[[1]]
# Cobalt
element_stats_para[[2]]
element_stats_nonpara[[2]]
# Copper
element_stats_para[[3]]
element_stats_nonpara[[3]]
# Zinc
element_stats_para[[4]]
element_stats_nonpara[[4]]
# Cadmium
element_stats_para[[5]]
element_stats_nonpara[[5]]
# Manganese
element_stats_para[[6]]
element_stats_nonpara[[6]]
# Selenium
element_stats_para[[7]]
element_stats_nonpara[[7]]
